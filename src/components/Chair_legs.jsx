/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 .\public\models\chair_legs.gltf -k -K
*/

import React from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import * as THREE from 'three'
import { useCustomization } from '../contexts/Customization';

const Chair_legs = (props) => {
  const {material, setMaterial, legs, chairColor} = useCustomization();
  const { nodes, materials } = useGLTF('./models/chair_legs.gltf');

  const leatherTextureProps = useTexture({
    //map: './textures/leather/Leather_008_Base Color.jpg',
    aoMap: './textures/leather/Leather_008_Ambient Occlusion.jpg',
    normalMap: './textures/leather/Leather_008_Normal.jpg',
    roughnessMap: './textures/leather/Leather_008_Roughness.jpg'
  })

  //leatherTextureProps.map.repeat.set(3, 3);
  leatherTextureProps.aoMap.repeat.set(3, 3);
  leatherTextureProps.normalMap.repeat.set(3, 3);
  leatherTextureProps.roughnessMap.repeat.set(3, 3);

  //leatherTextureProps.map.wrapS =
    //leatherTextureProps.map.wrapT =
    leatherTextureProps.aoMap.wrapS =
    leatherTextureProps.aoMap.wrapT =
    leatherTextureProps.normalMap.wrapS =
    leatherTextureProps.normalMap.wrapT =
    leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT =
      THREE.RepeatWrapping;

  const fabricTextureProps = useTexture({
    //map: './textures/fabric/Substance_Graph_BaseColor.jpg',
    aoMap: './textures/fabric/Substance_Graph_AmbientOcclusion.jpg',
    normalMap: './textures/fabric/Substance_Graph_Normal.jpg',
    roughnessMap: './textures/fabric/Substance_Graph_Roughness.jpg'
  })

  //fabricTextureProps.map.repeat.set(3, 3);
  fabricTextureProps.aoMap.repeat.set(3, 3);
  fabricTextureProps.normalMap.repeat.set(4, 4);
  fabricTextureProps.roughnessMap.repeat.set(3, 3);

  //fabricTextureProps.map.wrapS =
    //fabricTextureProps.map.wrapT =
    fabricTextureProps.aoMap.wrapS =
    fabricTextureProps.aoMap.wrapT =
    fabricTextureProps.normalMap.wrapS =
    fabricTextureProps.normalMap.wrapT =
    fabricTextureProps.roughnessMap.wrapS =
    fabricTextureProps.roughnessMap.wrapT =
        THREE.RepeatWrapping;

  const woodTextureProps = useTexture({
    map: './textures/wood/Wood_027_basecolor.jpg',
    aoMap: './textures/wood/Wood_027_ambientOcclusion.jpg',
    normalMap: './textures/wood/Wood_027_normal.jpg',
    roughnessMap: './textures/wood/Wood_027_roughness.jpg'
  })

  woodTextureProps.map.repeat.set(3, 3);
  woodTextureProps.aoMap.repeat.set(3, 3);
  woodTextureProps.normalMap.repeat.set(3, 3);
  woodTextureProps.roughnessMap.repeat.set(3, 3);

  woodTextureProps.map.wrapS =
    woodTextureProps.map.wrapT =
    woodTextureProps.aoMap.wrapS =
    woodTextureProps.aoMap.wrapT =
    woodTextureProps.normalMap.wrapS =
    woodTextureProps.normalMap.wrapT =
    woodTextureProps.roughnessMap.wrapS =
    woodTextureProps.roughnessMap.wrapT =
      THREE.RepeatWrapping;

  const plasticTextureProps = useTexture({
    map: './textures/plastic/Plastic_001_COLOR.jpg',
    roughnessMap: './textures/plastic/Plastic_001_ROUGH.jpg'
  });

  plasticTextureProps.map.repeat.set(3, 3);
  plasticTextureProps.roughnessMap.repeat.set(3, 3);

  plasticTextureProps.map.wrapS =
    plasticTextureProps.map.wrapT =
    plasticTextureProps.roughnessMap.wrapS =
    plasticTextureProps.roughnessMap.wrapT =
      THREE.RepeatWrapping;

  const plasticMoldTextureProps = useTexture({
    normalMap: './textures/Plasticmate/Plastic008_1K-JPG_NormalGL.jpg',
    roughnessMap: './textures/Plasticmate/Plastic008_1K-JPG_Roughness.jpg',
  });

  plasticMoldTextureProps.normalMap.repeat.set(3, 3);
  plasticMoldTextureProps.roughnessMap.repeat.set(3, 3);

  plasticMoldTextureProps.normalMap.wrapS =
    plasticMoldTextureProps.normalMap.wrapT =
    plasticMoldTextureProps.roughnessMap.wrapS =
    plasticMoldTextureProps.roughnessMap.wrapT =
      THREE.RepeatWrapping;

  const arrayTexture = [
    {"piel" : leatherTextureProps},
    {"tela" : fabricTextureProps},
    {"plastico" : plasticMoldTextureProps}
  ];

  const result = arrayTexture.find(item => Object.keys(item)[0] === material);
  const textureProps = result ? result[material] : null;

  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="asiento"
          geometry={nodes.asiento.geometry}
        >
          <meshStandardMaterial
            {...textureProps}
            color={chairColor.color}
          />
        </mesh>
        <mesh
          name="patas_uno"
          geometry={nodes.patas_uno.geometry}
          visible={legs === 1}
        >
          <meshStandardMaterial {...plasticTextureProps} />
        </mesh>
        <mesh
          name="patas_dos"
          geometry={nodes.patas_dos.geometry}
          material={materials.Mat_AO}
          visible={legs === 2}
        />
      </group>
    </group>
  )
}

useGLTF.preload('./models/chair_legs.gltf')

export default Chair_legs;